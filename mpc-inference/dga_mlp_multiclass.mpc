from Compiler import ml

#sfix.set_precision(8, 16)
#print_float_precision(16)

class Embedding:
    def __init__(self, output_dim, weights, X):
        self.weights=weights
        self.output_dim = output_dim
        self.Y = self.get(X)

    def get(self, X):
        vector_lenght = X.sizes[1]
        Y = sfix.Matrix(1, vector_lenght*self.output_dim)
        Y[0].assign((X*self.weights).get_vector(), base=0)

        return Y

layers=[
    ml.Dense(1, 8192, 100, activation='relu'),  
    ml.Dense(1, 100, 65),  
    ml.MultiOutput(1, 65)]

embedding_weights = sfix.Matrix(128, 128)

embedding_weights.input_from(0)
layers[0].W.input_from(0) # weight layer 0
layers[0].b.input_from(0) # bias
layers[1].W.input_from(0) # weight layer 1
layers[1].b.input_from(0) # bias
graph = ml.Optimizer()
test_X = sfix.Matrix(64, 128)
test_y = sfix.Matrix(1,1)
graph.layers = layers
total=1
acc = sfix.Matrix(1, total)

@for_range_opt([total])
def _(i):
    test_X.input_from(1)
    test_y.input_from(1)
    start_timer(10)
    embedding = Embedding(128, embedding_weights, test_X)
    res = graph.eval(embedding.Y)
    stop_timer(10)
    predict=sfix(ml.argmax(res[0]))
    real=sfix(test_y[0][0])
    eval=predict.__eq__(real)
    acc[0][i] = sfix(eval)
    print_ln('predict: %s expected:%s', predict.reveal(), real.reveal())
